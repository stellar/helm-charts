global:
  ## You can choose between a StatefulSet (default) or Deployment
  ## Use a Deployment for a single pod in a non-critical (dev) environment
  ## Otherwise, choose StatefulSet

  # useDeployment: true

  ## Stellar network to use. When set to "testnet" or "pubnet" default
  ## recommended config will be used.
  ## When set to any other value you have to provide extra settings:
  ##   - global.historyArchiveUrls
  ##   - global.networkPassphrase
  ##   - ingest.coreConfig
  network: testnet

  ## Only used when global.network is something other than "testnet" or "pubnet"
  historyArchiveUrls: "url1,url2,url3"

  ## Only used when global.network is something other than "testnet" or "pubnet"
  networkPassphrase: "My Stellar Network; June 2020"

  ## String to partially override common.fullname template (will maintain the release name)
  nameOverride: ""

  ## String to fully override common.fullname template
  fullnameOverride: ""

  ## List of pre-existing image Pull Secrets to use
  imagePullSecrets: []
  # - imagepullsecret1
  # - imagepullsecret2

  image:
    horizon:
      registry: docker.io
      repository: stellar/stellar-horizon
      ## Optional tag. Defaults to the appVersion from Chart.yaml
      # tag: 1.2.3

      ## Specify a imagePullPolicy
      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
      ##
      pullPolicy: Always
    coreExporter:
      registry: docker.io
      repository: stellar/stellar-core-prometheus-exporter
      tag: latest
      ## Specify a imagePullPolicy
      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
      ##
      pullPolicy: Always

ingest:
  ## See global.image.horizon for image settings

  ## Whether to deploy ingesting instances
  enabled: true

  ## List of CLI arguments to provide to the stellar-horizon binary
  cliArgs:
  - "--apply-migrations"

  ## Horizon config
  horizonConfig:
    adminPort: 6000
    allowEmptyLedgerDataResponses: true
    applyMigrations: false
    captiveCoreUseDb: false
    connectionTimeout: 10
    disablePathFinding: false
    enableAccountsForSigner: false
    enableAssetStats: true
    friendbotUrl: ""
    historyRetentionCount: 34560
    ingestFailedTransactions: true
    maxDBConnections: 20
    perHourRateLimit: 3600
    port: 8000
    sseUpdateFrequency: 4
    stellarCoreUrl: "http://127.0.0.1:11626"

  ## pre existing secret that contains the DATABASE_URL key with postgres URL
  existingSecret: ""

  ## Only used when global.network is something other than "testnet" or "pubnet"
  coreConfig: {}

  ## For production use cases we recommend at least 2 replicas
  replicaCount: 1

  ## Horizon ingest pods do not need to be initialized in a specific order
  podManagementPolicy: Parallel

  serviceAccountName: default

  ## Additional annotations or labels to add the Deployment template
  annotations: {}
  #  prometheus.io/scrape: "true"
  #  prometheus.io/port: "6000"
  labels: {}
  #  environment: "dev"
  #  mylabel1: "myvalue1"

  persistence:
    enabled: false
    storageClass: default
    size: 100G

  resources: {}
  #  limits:
  #    cpu: 2
  #    memory: 4Gi
  #  requests:
  #    cpu: 250m
  #    memory: 2Gi

  ## Controls whether ingesting instances are exposed via k8s Ingress
  ingress:
    enabled: false
    host: horizon-ingest.example.com
    ## Extra annotations to add to the Ingress object
    annotations: {}
    #  kubernetes.io/ingress.class: "public"
    #  cert-manager.io/cluster-issuer: "default"
    ## Extra labels to add to the Ingress object
    labels: {}
    #  mylabel: myvalue

  coreExporter:
    ## Common prometheus config examples do not allow it to scrape 2 ports
    ## If you'd like to scrape both horizon and core metrics example
    ## workarounds can be found here:
    ##   https://github.com/prometheus/prometheus/issues/3756#issuecomment-362266296
    ##   https://github.com/prometheus/prometheus/issues/3756#issuecomment-874043080
    ## If you'd like to have prometheus
    enabled: true

    ## See global.image.coreExporter for image settings

    resources: {}
    #  limits:
    #    cpu: 250m
    #    memory: 512Mi
    #  requests:
    #    cpu: 50m
    #    memory: 128Mi

  affinity: {}
  podDisruptionBudget: {}

web:
  ## See global.image.horizon for image settings

  ## Whether to deploy non-ingesting instances
  ## Useful with read-only DB replica
  enabled: false

  ## List of CLI arguments to provide to the stellar-horizon binary
  cliArgs: []

  ## Horizon config
  horizonConfig:
    adminPort: 6000
    allowEmptyLedgerDataResponses: true
    connectionTimeout: 10
    enableAccountsForSigner: false
    enableAssetStats: true
    maxDBConnections: 20
    maxPathLength: 3
    perHourRateLimit: 8000
    port: 8000
    sseUpdateFrequency: 4
    stellarCoreUrl: "" # defaults to igest's core instance

  ## pre existing secret that contains the DATABASE_URL key with postgres URL
  existingSecret: ""

  ## For production use cases we recommend at least 2 replicas
  replicaCount: 1

  serviceAccountName: default

  ## Additional annotations or labels to add the Deployment template
  annotations: {}
  #   prometheus.io/scrape: "true"
  #   prometheus.io/port: "6000"
  labels: {}
  #   environment: "dev"
  #   mylabel1: "myvalue1"

  resources: {}
  #  limits:
  #    cpu: 2
  #    memory: 4Gi
  #  requests:
  #    cpu: 250m
  #    memory: 2Gi

  ## Controls whether ingesting instances are exposed via k8s Ingress
  ingress:
    enabled: false
    host: horizon-web.example.com
    ## Extra annotations to add to the Ingress object
    annotations: {}
    #  kubernetes.io/ingress.class: "public"
    #  cert-manager.io/cluster-issuer: "default"
    ## Extra labels to add to the Ingress object
    labels: {}
    #  mylabel: myvalue

  ## Example affinity
  # affinity:
  #   podAntiAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #     - labelSelector:
  #         matchLabels:
  #           app: account-viewer-v2
  #       topologyKey: kubernetes.io/hostname
  affinity: {}

  ## Example podDisruptionBudget
  # podDisruptionBudget:
  #   minAvailable: 1
  podDisruptionBudget: {}
