---
# SEP Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.fullName }}
  labels:
    app.kubernetes.io/name: {{ .Values.fullName }}
    helm.sh/chart: {{ include "common.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.fullName }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.fullName }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      {{- if (.Values.deployment).annotations }}
      annotations:
        {{- range $key, $value := .Values.deployment.annotations }}
          {{ $key }}: {{ $value | quote }}
          {{- end }}
      {{- end }}
    spec:
      {{- if (.Values.deployment).serviceAccountName }}
      serviceAccountName: {{ .Values.deployment.serviceAccountName | default "default" }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repo }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
          {{- if (.Values.stellarObserver).enabled }}
          args: ["--sep-server"]
          {{- else }}
          args: ["--sep-server", "--stellar-observer"]
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          startupProbe:
            httpGet:
              path: {{ .Values.deployment.startupProbePath | default "/health" }}
              port: {{ .Values.deployment.startupProbePort | default 8080 }}
            failureThreshold: {{ .Values.deployment.startupProbeFailureThreshold | default 10 }}
            periodSeconds: {{ .Values.deployment.startupProbePeriodSeconds | default 15 }}
          livenessProbe:
            httpGet:
              path: {{ .Values.deployment.livenessProbePath | default "/health" }}
              port: {{ .Values.deployment.livenessProbePort | default 8080 }}
            initialDelaySeconds: {{ .Values.deployment.livenessProbeInitialDelaySeconds | default 30 }}
            failureThreshold: {{ .Values.deployment.livenessProbeFailureThreshold | default 2 }}
            periodSeconds: {{ .Values.deployment.livenessProbePeriodSeconds | default 3 }}
          readinessProbe:
            httpGet:
              path: {{ .Values.deployment.readinessProbePath | default "/health" }}
              port: {{ .Values.deployment.livenessProbePort | default 8080 }}
            initialDelaySeconds: {{ .Values.deployment.readinessProbeInitialDelaySeconds | default 30 }}
            periodSeconds: {{ .Values.deployment.readinessProbePeriodSeconds | default 3 }}
          volumeMounts:
            - name: sep-config-volume
              mountPath: /config
              readOnly: true
          {{- if ((.Values.deployment).volumeMounts).configMaps }}
          {{- range $conf := .Values.deployment.volumeMounts.configMaps }}
            - mountPath: {{ $conf.mountPath }}
              name: {{ $conf.name }}-volume
          {{- end }}
          {{- end }}
          {{- if ((.Values.deployment).volumeMounts).secrets }}
          {{- range $secret := .Values.deployment.volumeMounts.secrets }}
            - mountPath: {{ $secret.mountPath | default $secret.name }}
              name: {{ $secret.name }}-volume
          {{- end }}
          {{- end }}
          ports:
          - name: http
            containerPort: {{ .Values.service.containerPort }}
            protocol: TCP
          - name: metrics
            containerPort: 8082
            protocol: TCP
          {{- if (.Values.deployment).env }}
          env:
{{ toYaml .Values.deployment.env | indent 12 }}
          {{- end }}
          {{- if (.Values.deployment).envFrom }}
          envFrom:
{{ toYaml .Values.deployment.envFrom | indent 12 }}
          {{- end }}
          {{- if (.Values.deployment).resources }}
          resources:
{{- toYaml .Values.deployment.resources | indent 12 }}
          {{- end }}     
      volumes:
        - name: sep-config-volume
          configMap:
            name: {{ .Values.fullName }}
      {{- if ((.Values.deployment).volumeMounts).configMaps }}
      {{- range $conf := .Values.deployment.volumeMounts.configMaps }}
        - name: {{ $conf.name }}-volume
          configMap:
            name: {{ $conf.name }}
      {{- end }}
      {{- end }}
      {{- if ((.Values.deployment).volumeMounts).secrets }}
      {{- range $secret := .Values.deployment.volumeMounts.secrets }}
        - name: {{ $secret.name }}-volume
          secret:
            secretName: {{ $secret.name }}
      {{- end }}
      {{- end }}

{{- $stellarObserverDeployment := ((.Values.stellarObserver).deployment) }}
{{- if (.Values.stellarObserver).enabled }}
---
# Stellar Observer
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.fullName }}-observer
  labels:
    app.kubernetes.io/name: {{ .Values.fullName }}-observer
    helm.sh/chart: {{ include "common.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.fullName }}-observer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.fullName }}-observer
        app.kubernetes.io/instance: {{ .Release.Name }}
      {{- if (.Values.deployment).annotations }}
      annotations:
        {{- range $key, $value := .Values.deployment.annotations }}
          {{ $key }}: {{ $value | quote }}
          {{- end }}
      {{- end }}
    spec:
      {{- if (.Values.deployment).serviceAccountName }}
      serviceAccountName: {{ .Values.deployment.serviceAccountName | default "default" }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}-observer
          image: "{{ .Values.image.repo }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
          args: ["--stellar-observer"]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          startupProbe:
            httpGet:
              path: {{ $stellarObserverDeployment.probePath | default "/health" }}
              port: {{ $stellarObserverDeployment.port | default 8083 }}
            failureThreshold: {{ $stellarObserverDeployment.startupProbeFailureThreshold | default 10 }}
            periodSeconds: {{ $stellarObserverDeployment.probePeriodSeconds | default 15 }}
          livenessProbe:
            httpGet:
              path: {{ $stellarObserverDeployment.probePath | default "/health" }}
              port: {{ $stellarObserverDeployment.port | default 8083 }}
            initialDelaySeconds: {{ $stellarObserverDeployment.initialDelaySeconds | default 30 }}
            failureThreshold: {{ $stellarObserverDeployment.livenessProbeFailureThreshold | default 2 }}
            periodSeconds: {{ $stellarObserverDeployment.probePeriodSeconds | default 15 }}
          readinessProbe:
            httpGet:
              path: {{ $stellarObserverDeployment.probePath | default "/health" }}
              port: {{ $stellarObserverDeployment.port | default 8083 }}
            initialDelaySeconds: {{ $stellarObserverDeployment.initialDelaySeconds | default 30 }}
            periodSeconds: {{ $stellarObserverDeployment.probePeriodSeconds | default 15 }}
          volumeMounts:
            - name: sep-config-volume
              mountPath: /config
              readOnly: true
          {{- if ((.Values.deployment).volumeMounts).configMaps }}
          {{- range $conf := .Values.deployment.volumeMounts.configMaps }}
            - mountPath: {{ $conf.mountPath }}
              name: {{ $conf.name }}-volume
          {{- end }}
          {{- end }}
          {{- if ((.Values.deployment).volumeMounts).secrets }}
          {{- range $secret := .Values.deployment.volumeMounts.secrets }}
            - mountPath: {{ $secret.mountPath | default $secret.name }}
              name: {{ $secret.name }}-volume
          {{- end }}
          {{- end }}
          ports:
          - name: http
            containerPort: {{ $stellarObserverDeployment.port | default 8083 }}
            protocol: TCP
          {{- if (.Values.deployment).env }}
          env:
{{ toYaml .Values.deployment.env | indent 12 }}
          {{- end }}
          {{- if (.Values.deployment).envFrom }}
          envFrom:
{{ toYaml .Values.deployment.envFrom | indent 12 }}
          {{- end }}
          {{- if (.Values.deployment).resources }}
          resources:
{{- toYaml .Values.deployment.resources | indent 12 }}
          {{- end }}     
      volumes:
        - name: sep-config-volume
          configMap:
            name: {{ .Values.fullName }}
      {{- if ((.Values.deployment).volumeMounts).configMaps }}
      {{- range $conf := .Values.deployment.volumeMounts.configMaps }}
        - name: {{ $conf.name }}-volume
          configMap:
            name: {{ $conf.name }}
      {{- end }}
      {{- end }}
      {{- if ((.Values.deployment).volumeMounts).secrets }}
      {{- range $secret := .Values.deployment.volumeMounts.secrets }}
        - name: {{ $secret.name }}-volume
          secret:
            secretName: {{ $secret.name }}
      {{- end }}
      {{- end }}

{{- end }}