fullName: anchor-platform
service:
   containerPort: 8080
   servicePort: 8080
   replicas: 1
   type: NodePort
   name: sep
image:
   repo: stellar
   name: anchor-platform
   tag: latest
   pullPolicy: Always
deployment:
   serviceAccountName: default
   # liveness, readiness and startup probe overrides
   startupProbePeriodSeconds: 10
   startupProbeFailureThreshold: 30
   # additional volume mounts 
   volumeMounts:
      secrets:
         - name: apsigningseed
           mountPath: signingseed
      configMaps:
         - name: assets
           mountPath: assets
   envFrom:
   - secretRef:
       name: apsigningseed
   annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8082"
        prometheus.io/scrape: "true"
ingress:
   labels:
     app: appy
     test: label_test
   annotations:
     kubernetes.io/ingress.class: "public"
     cert-manager.io/cluster-issuer: "default"
     ingress.kubernetes.io/ssl-redirect: "true"
     ingress.kubernetes.io/browser-xss-filter: "true"
     ingress.kubernetes.io/frame-deny: "true"
     ingress.kubernetes.io/content-type-nosniff: "true"
     ingress.kubernetes.io/hsts-max-age: "31536000"
     ingress.kubernetes.io/hsts-include-subdomains: "true"
   tls:
     host: "www.stellaranchordemo.com"
     secretName: anchor-platform-sep-server-cert
   rules:
      hosts:
        - host: "www.stellaranchordemo.com"
          path: /
          pathType: Prefix
          backend:
            servicePort: "{{ .Values.service.containerPort }}"
            serviceName: "{{ .Values.fullName }}-svc-{{ .Values.service.name }}"
#
# If you want to have a dedicated stellar-observer service, you need to
# uncomment the `stellarObserver` section below.
#
# Attention! If you use the stellar observer as a separate service – by setting
# `stellarObserver.enabled` flag to `true` – you must use a shared database that
# will be accessible by both deployments (sep-server and stellar-observer).
# In-memory databases won't work.
# stellarObserver:
#    # This will enable the stellar-observer service as a separate deployment:
#    enabled: true
#    # The stellarObserver.deployment section is optional, the templates have
#    # default values.
#    deployment:
#       port: 8083
#       probePath: "/health"
#       probePeriodSeconds: 15
#       initialDelaySeconds: 60
#       startupProbeFailureThreshold: 10
#       livenessProbeFailureThreshold: 2
#    ingress:
#       tls:
#          host: "observer.your_anchor_domain.com"    # Replace this with a valid host name
#       rules:
#          hosts:
#          - host: "observer.your_anchor_domain.com"  # Replace this with a valid host name
#            path: /
#            pathType: Prefix
#
stellar:
   toml:
      #accounts: ['"GCHLHDBOKG2JWMJQBTLSL5XG6NO7ESXI2TAQKZXCXWXB5WI2X6W233PR"'] 
      signing_key: "GCHLHDBOKG2JWMJQBTLSL5XG6NO7ESXI2TAQKZXCXWXB5WI2X6W233PR"
      documentation:
         ORG_NAME: "your_org"
         ORG_URL: "https:/your_org.org"
         ORG_DESCRIPTION: "https://your_org_logo.png"
         ORG_SUPPORT_EMAIL: "your_email@your_org.org"
   anchor:
      data_access:
         type: data-spring-jdbc
         settings: data-spring-jdbc-sqlite
#         settings: data-spring-jdbc-aws-aurora-postgres
#   data_spring_jdbc_aws_aurora_postgres:
#      spring.jpa.generate-ddl: false
#      spring.jpa.hibernate.ddl-auto: none
#      spring.jpa.database: POSTGRESQL
#      spring.jpa.show-sql: false
#      spring.datasource.driver-class-name: org.postgresql.Driver
#      spring.datasource.type: org.stellar.anchor.platform.databaseintegration.IAMAuthDataSource
#      spring.datasource.url: jdbc:postgresql://database-aurora-iam-instance-1.chizvyczscs2.us-east-1.rds.amazonaws.com:5432/anchorplatform
#      spring.datasource.username: anchorplatform1
#      spring.datasource.hikari.max-lifetime: 840000    # 14 minutes because IAM tokens are valid for 15min
#      spring.mvc.converters.preferred-json-mapper: gson
#      spring.liquibase.change-log: classpath:/db/changelog/db.changelog-master.yaml
#      spring.flyway.user: ${FLYWAY_USER}
#      spring.flyway.password: ${FLYWAY_PASSWORD} # can use a token value if authenticating via IAM
#      spring.flyway.url: jdbc:postgresql://database-aurora.region.rds.amazonaws.com:port/instance
#      spring.flyway.locations: classpath:/db/migration
#      spring.flyway.enabled: false
   data_spring_jdbc_sqlite:
      spring.jpa.database-platform: org.stellar.anchor.platform.sqlite.SQLiteDialect
      spring.jpa.hibernate.ddl-auto: update
      spring.jpa.generate-ddl: true
      spring.jpa.hibernate.show_sql: false
      spring.datasource.url: jdbc:sqlite:anchor-proxy.db
      spring.datasource.driver-class-name: org.sqlite.JDBC
      spring.datasource.username: ${SQLITE_USERNAME}
      spring.datasource.password: ${SQLITE_PASSWORD}
      spring.mvc.converters.preferred-json-mapper: gson
      spring.flyway.user: ${SQLITE_USERNAME}
      spring.flyway.password: ${SQLITE_USERNAME}
      spring.flyway.url: jdbc:sqlite:anchor-proxy.db
      spring.flyway.locations: classpath:/db/migration
      spring.flyway.enabled: false
   app_config:
      app:
         stellarNetwork: TESTNET
         hostUrl: https://www.stellaranchordemo.com
         backendUrl: https://anchor-reference-server-dev.stellar.org
         jwtSecretKey: ${JWT_SECRET}
         assets: file:/assets/assets.json # use file if you add your assets using config map
         platformToAnchorSecret: ${PLATFORM_TO_ANCHOR_SECRET}
         anchorToPlatformSecret: ${ANCHOR_TO_PLATFORM_SECRET}
      sep1:
        enabled: true
        stellarFile: file:/config/stellar-wks.toml 
      sep10:
        enabled: true
        homeDomain: www.stellaranchordemo.com
        signingSeed: ${SEP10_SIGNING_SEED}
        requireKnownOmnibusAccount: false
        omnibusAccountList:
#        omnibusAccountList: |
#          GAB24L6CPBKSMQOBXJ5PRA6I66X4TGZHPAEI2CMPNLC6I2WX646OYCAV,
#          GAB24L6CPBKSMQOBXJ5PRA6I66X4TGZHPAEI2CMPNLC6I2WX646OYCAA
      sep12:
        enabled: true
        customerIntegrationEndpoint: https://anchor-reference-server-dev.stellar.org
      sep31:
        enabled: true
        feeIntegrationEndPoint: https://anchor-reference-server-dev.stellar.org
        # uniqueAddressIntegrationEndPoint: https://anchor-reference-server-dev.stellar.org
      sep38:
        enabled: true
        quoteIntegrationEndPoint: https://anchor-reference-server-dev.stellar.org
      circle:
         circleUrl: https://api-sandbox.circle.com
         apiKey: ${CIRCLE_API_KEY}
      event:
         enabled: true
         publisherType: kafka
      kafka_publisher:
         bootstrapServer: kafka.bootstrap.host:9092
      circle_payment_observer:
         enabled: true
      payment_gateway:
         circle:
            enabled: true
         stellar:
            enabled: false
            name: "stellar"
            horizonUrl: https://horizon-testnet.stellar.org
            secretKey: secret # stellar account secret key
      spring:
         logging:
            level:
               root: DEBUG
               org.springframework: DEBUG
               org.springframework.web.filter: DEBUG
               org.stellar: DEBUG
