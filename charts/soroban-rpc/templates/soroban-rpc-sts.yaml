---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "common.fullname" . }}
  {{- if .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
  {{- end }}
  labels:
    app: {{ template "common.fullname" . }}
    chart: {{ template "common.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  # Currently Soroban RPC doesn't support HA deployments over a single shared data store
  # but, each replica pod in a statefulset will have it's own data store on it's PVC.
  # This statefulset creates two replicas which will be monitored by the readiness probe. 
  # Having two replicas also ensures zero downtime during upgrades as at least one replica is 
  # gauranteed to be running while the other one is upgraded and catching backup to network 
  # after restart
  replicas: 2
  serviceName: {{ template "common.fullname" . }}
  selector:
    matchLabels:
      app: {{ template "common.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "common.fullname" . }}
        release: {{ .Release.Name }}
      {{- if (.Values.sorobanRpc).labels }}
        {{- range $key, $value := .Values.sorobanRpc.labels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      {{- end }}
      {{- if (.Values.sorobanRpc).annotations }}
      annotations:
        {{- range $key, $value := .Values.sorobanRpc.annotations }}
          {{ $key }}: {{ $value | quote }}
          {{- end }}
      {{- end }}
    spec:
      {{- if (.Values.sorobanRpc).serviceAccountName }}
      serviceAccountName: {{ .Values.sorobanRpc.serviceAccountName | default "default" }}
      {{- end }}
      {{- if (.Values.global).imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.global.imagePullSecrets | indent 8 }}
      {{- end }}
      containers:
      - name: soroban-rpc
        image: {{ include "common.sorobanRpcImage" . | quote }}
        args: ["--config-path", "/config/soroban-rpc.cfg"]
        imagePullPolicy: {{ .Values.global.image.sorobanRpc.pullPolicy }}
        volumeMounts:
        - name: config-volume
          mountPath: /config
          readOnly: true
        {{- if (.Values.sorobanRpc.persistence).enabled }}
        - name: {{ template "common.fullname" . }}-var-lib-stellar
          mountPath: /var/lib/stellar
        {{- end }}
        ports:
        - containerPort: 8000
          name: soroban-rpc
        - containerPort: 6061
          name: admin-port
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - |
                curl --location --request POST 'http://127.0.0.1:8000/' \
                  --header 'Content-Type: application/json' \
                  --data-raw '{
                    "jsonrpc": "2.0",
                    "id": 10235,
                    "method": "getHealth"
                  }' | jq -es 'if (. | length) == 0 then null else .[0] end | .result | .status == "healthy" and (.latestLedger - .oldestLedger >= (.ledgerRetentionWindow - 10))' > /dev/null;
          failureThreshold: 2
          periodSeconds: 10
          successThreshold: 2
          timeoutSeconds: 5         
        {{- if (.Values.sorobanRpc).resources}}
        resources:
{{ toYaml .Values.sorobanRpc.resources | indent 10 }}
        {{- end }}
      volumes:
      - name: config-volume
        configMap:
          name: {{ template "common.fullname" . }}
  {{- if (.Values.sorobanRpc.persistence).enabled }}
  volumeClaimTemplates:
  - metadata:
      name: {{ template "common.fullname" . }}-var-lib-stellar
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: {{ .Values.sorobanRpc.persistence.storageClass }}
      resources:
        requests:
          storage: {{ .Values.sorobanRpc.persistence.size | quote }}
  {{- end }}
